import { Injectable } from '@angular/core';
import { DSOPropertyBreadcrumbResolver } from '../core/breadcrumbs/dso-property-breadcrumb-resolver.service';
import { ExploitationPlanPageBreadcrumbService } from './exploitation-plan-page-breadcrumb.service';
import { ItemDataService } from '../core/data/item-data.service';
import { FollowLinkConfig } from '../shared/utils/follow-link-config.model';
import { isObservable, Observable } from 'rxjs';
import { Item } from '../core/shared/item.model';
import { RemoteData } from '../core/data/remote-data';
import { map, switchMap, take } from 'rxjs/operators';
import { ExploitationPlanService } from '../exploitation-plan/core/exploitation-plan.service';
import { getFirstSucceededRemoteDataPayload } from '../core/shared/operators';

@Injectable()
export class ExploitationPlanBreadcrumbResolverService extends DSOPropertyBreadcrumbResolver<any, Item> {

  constructor(
    protected breadcrumbService: ExploitationPlanPageBreadcrumbService,
    protected dataService: ItemDataService,
    protected exploitationPlanService: ExploitationPlanService
  ) {
    super(breadcrumbService, dataService, dataService);
  }

  get followLinks(): FollowLinkConfig<any>[] {
    return [];
  }

  get followDSOLinks(): FollowLinkConfig<Item>[] {
    return [];
  }

  mapProperty(dso: Item): Observable<any> {
    if (isObservable(dso)) {
      return (dso as Observable<RemoteData<Item>>)
        .pipe(
          map(rd => rd.payload),
          switchMap(this.fetchExploitationPlan),
          take(1)
        )
    }
    return this.fetchExploitationPlan(dso);
  }

  private fetchExploitationPlan(project: Item): Observable<Item> {
    return this.exploitationPlanService.getExploitationPlanFromProjectId(project.id)
      .pipe(
        getFirstSucceededRemoteDataPayload()
      );
  }

}
