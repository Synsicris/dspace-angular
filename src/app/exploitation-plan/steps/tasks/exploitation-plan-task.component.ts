import { Component, Input, OnDestroy, OnInit } from '@angular/core';
import { Router } from '@angular/router';

import { BehaviorSubject, Observable, Subscription } from 'rxjs';
import { filter, map, take } from 'rxjs/operators';

import { hasValue } from '../../../shared/empty.util';
import { EditItemDataService } from '../../../core/submission/edititem-data.service';
import { EditItemMode } from '../../../core/submission/models/edititem-mode.model';
import { ExploitationPlanService } from '../../core/exploitation-plan.service';
import { ExploitationPlanStateService } from '../../core/exploitation-plan-state.service';
import { ExploitationPlanTask } from '../../core/models/exploitation-plan-task.model';
import { ExploitationPlanStep } from '../../core/models/exploitation-plan-step.model';

@Component({
  selector: 'ipw-exploitation-plan-task',
  styleUrls: ['./exploitation-plan-task.component.scss'],
  templateUrl: './exploitation-plan-task.component.html'
})
export class ExploitationPlanTaskComponent implements OnInit, OnDestroy {

  @Input() public projectId: string;
  @Input() public exploitationPlanId: string;
  @Input() public exploitationPlanStepId: string;
  @Input() public exploitationPlanStepType: string;
  @Input() public exploitationPlanTask: ExploitationPlanTask;
  @Input() public selectable = true;
  @Input() public multiSelectEnabled = false;
  @Input() public parentStep: ExploitationPlanStep;
  @Input() public stepHasDetail: boolean;
  @Input() public taskPosition: number;
  @Input() public isObjectivePage: boolean;

  public hasFocus$: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);
  public selectStatus: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);
  public isRedirectingToEdit$: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);
  public taskType$: Observable<string>;

  private removing$: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);
  private subs: Subscription[] = [];
  private canEdit$: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);

  constructor(
    private editItemDataService: EditItemDataService,
    protected exploitationPlanService: ExploitationPlanService,
    protected exploitationPlanStateService: ExploitationPlanStateService,
    private router: Router
  ) {
  }

  ngOnInit(): void {
    this.taskType$ = this.exploitationPlanService.getExploitationPlanTaskType(this.exploitationPlanStepType, this.exploitationPlanTask.type);

    this.editItemDataService.searchEditModesByID(this.exploitationPlanTask.id).pipe(
      map((editModes: EditItemMode[]) => editModes && editModes.length > 0),
      take(1)
    ).subscribe((canEdit: boolean) => {
      this.canEdit$.next(canEdit);
    });
  }

  public isProcessingRemove(): Observable<boolean> {
    return this.removing$.asObservable();
  }

  public navigateToEditItemPage(): void {
    this.isRedirectingToEdit$.next(true);
    this.editItemDataService.searchEditModesByID(this.exploitationPlanTask.id).pipe(
      filter((editModes: EditItemMode[]) => editModes && editModes.length > 0),
      map((editModes: EditItemMode[]) => editModes[0]),
      take(1)
    ).subscribe((editMode: EditItemMode) => {
      this.router.navigate(['edit-items', this.exploitationPlanTask.id + ':' + editMode.name]);
      this.isRedirectingToEdit$.next(false);
    });
  }

  public removeTask() {
    this.removing$.next(true);
    this.exploitationPlanStateService.removeTaskFromStep(this.exploitationPlanId, this.exploitationPlanStepId, this.exploitationPlanTask.id, this.taskPosition);
  }

  ngOnDestroy(): void {
    this.subs.filter((sub) => hasValue(sub)).forEach((sub) => sub.unsubscribe());
  }

  canEdit(): Observable<boolean> {
    return this.canEdit$.asObservable();
  }
}
