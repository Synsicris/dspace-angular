import { ChangeDetectorRef, Component, Input } from '@angular/core';

import { Observable, of as observableOf } from 'rxjs';
import { NgbModal } from '@ng-bootstrap/ng-bootstrap';

import { ExploitationPlanStep } from '../../core/models/exploitation-plan-step.model';
import { ExploitationPlanStateService } from '../../core/exploitation-plan-state.service';
import { CreateSimpleItemModalComponent } from '../../../shared/create-simple-item-modal/create-simple-item-modal.component';
import { ExploitationPlanService } from '../../core/exploitation-plan.service';
import { SimpleItem } from '../../../shared/create-simple-item-modal/models/simple-item.model';
import { ExploitationPlanTask } from '../../core/models/exploitation-plan-task.model';
import { ProjectGroupService } from '../../../core/project/project-group.service';
import { Community } from '../../../core/shared/community.model';
import { ProjectGrantsTypes } from '../../../core/project/project-data.service';

@Component({
  selector: 'ipw-exploitation-plan-step-container',
  styleUrls: ['./exploitation-plan-step-container.component.scss'],
  templateUrl: './exploitation-plan-step-container.component.html'
})
export class ExploitationPlanStepContainerComponent {

  /**
   * The project id which the subproject belong to
   */
  @Input() public projectId: string;

  /**
   * The exploitation plan step object
   */
  @Input() public exploitationPlanStep: ExploitationPlanStep;

  /**
   * The subproject community which the exploitation Plan belong to
   */
  @Input() subproject: Community;

  private processing$: Observable<boolean> = observableOf(false);

  constructor(
    protected cdr: ChangeDetectorRef,
    protected exploitationPlanService: ExploitationPlanService,
    protected exploitationPlanStateService: ExploitationPlanStateService,
    protected modalService: NgbModal,
    protected projectGroupService: ProjectGroupService
  ) {
  }

  ngOnInit(): void {
    this.processing$ = this.exploitationPlanStateService.isProcessing();
  }

  openModal() {

    const modalRef = this.modalService.open(CreateSimpleItemModalComponent, { size: 'lg' });

    modalRef.result.then((result) => {
      if (result) {
        this.cdr.detectChanges();
      }
    }, () => null);
    modalRef.componentInstance.formConfig = this.exploitationPlanService.getExploitationPlanTaskFormConfig(this.exploitationPlanStep.type);
    modalRef.componentInstance.formHeader = this.exploitationPlanService.getExploitationPlanTaskFormHeader(this.exploitationPlanStep.type);
    modalRef.componentInstance.processing = this.exploitationPlanStateService.isProcessing();
    modalRef.componentInstance.vocabularyName = this.exploitationPlanService.getTaskTypeAuthorityName(this.exploitationPlanStep.type);
    modalRef.componentInstance.searchConfiguration = this.exploitationPlanService.getSearchTaskConfigName(this.exploitationPlanStep.type);
    modalRef.componentInstance.scope = this.projectId;
    modalRef.componentInstance.query = this.buildExcludedTasksQuery();

    modalRef.componentInstance.createItem.subscribe((item: SimpleItem) => {
      this.exploitationPlanStateService.dispatchGenerateExploitationPlanTask(
        this.projectId,
        this.exploitationPlanStep.parentId,
        this.exploitationPlanStep.id,
        item.type.value,
        item.metadata);
    });
    modalRef.componentInstance.addItems.subscribe((items: SimpleItem[]) => {
      items.forEach((item) => {
        this.exploitationPlanStateService.dispatchAddExploitationPlanTaskAction(
          this.exploitationPlanStep.parentId,
          this.exploitationPlanStep.id,
          item.id);
      });
    });
  }

  getTasks(): Observable<ExploitationPlanTask[]> {
    return this.exploitationPlanStateService.getExploitationPlanTasksByParentId(
      this.exploitationPlanStep.parentId,
      this.exploitationPlanStep.id
    );
  }

  isProcessing(): Observable<boolean> {
    return this.processing$;
  }

  private buildExcludedTasksQuery(): string {
    const subprojectMembersGroup = this.projectGroupService.getProjectMembersGroupNameByCommunity(this.subproject);
    let query = `(entityGrants:${ProjectGrantsTypes.Project} OR entityPolicyGroup:${subprojectMembersGroup})`;
    if (this.exploitationPlanStep.getTasksIds().length > 0) {
      const excludedIdsQuery = '-(search.resourceid' + ':(' + this.exploitationPlanStep.getTasksIds().join(' OR ') + '))';
      query += ` AND ${excludedIdsQuery}`;
    }

    return query;
  }
}
