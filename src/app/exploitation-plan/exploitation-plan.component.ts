import { Component, Input, OnInit, OnDestroy } from '@angular/core';
import { Item } from '../core/shared/item.model';
import { Community } from '../core/shared/community.model';
import { ExploitationPlanStateService } from './core/exploitation-plan-state.service';
import { ExploitationPlanStep } from './core/models/exploitation-plan-step.model';
import { Observable } from 'rxjs/internal/Observable';
import { distinctUntilChanged, filter, map } from 'rxjs/operators';

@Component({
  selector: 'ds-exploitation-plan',
  templateUrl: './exploitation-plan.component.html',
  styleUrls: ['./exploitation-plan.component.scss']
})
export class ExploitationPlanComponent implements OnInit,OnDestroy {

  /**
   * The exploitation Plan item
   */
  @Input() exploitationPlan: Item;

  /**
   * The project id which the subproject belong to
   */
  @Input() public projectId: string;

  /**
   * The subproject community which the exploitation Plan belong to
   */
  @Input() subproject: Community;

  public exploitationPlanId: string;

  constructor(protected exploitationPlanStateService: ExploitationPlanStateService) {
  }

  ngOnInit(): void {
    this.exploitationPlanId = this.exploitationPlan?.id;
  }

  getExploitationPlanStep(): Observable<ExploitationPlanStep[]> {
    return this.exploitationPlanStateService.getExploitationPlanStep(this.exploitationPlanId);
  }

  isLoading(): Observable<boolean> {
    return this.exploitationPlanStateService.isExploitationPlanLoaded().pipe(
      map((loaded: boolean) => !loaded)
    );
  }

  /**
   * When destroy component clear all collapsed values.
   */
  ngOnDestroy() {
    this.exploitationPlanStateService.dispatchClearCollapsable();
  }
}
