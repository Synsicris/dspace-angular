import { Injectable } from '@angular/core';
import { catchError, map, switchMap } from 'rxjs/operators';
import { Store } from '@ngrx/store';
import { Actions, Effect, ofType } from '@ngrx/effects';
import { TranslateService } from '@ngx-translate/core';
import { NgbModal } from '@ng-bootstrap/ng-bootstrap';


import { StoreActionTypes } from '../../store.actions';
import { ItemAuthorityRelationService } from '../../core/shared/item-authority-relation.service';
import { ItemDataService } from '../../core/data/item-data.service';
import { NotificationsService } from '../../shared/notifications/notifications.service';
import { NormalizeExploitationPlanObjectsOnRehydrateAction } from './exploitation-plan.actions';
import {
  InitWorkingplanAction,
  RetrieveAllWorkpackagesAction, RetrieveAllWorkpackagesErrorAction,
  WorkpackageActionTypes
} from '../../core/working-plan/working-plan.actions';
import { WorkpackageSearchItem } from '../../core/working-plan/models/workpackage-step.model';
import { ExploitationPlanService } from './exploitation-plan.service';

/**
 * Provides effect methods for jsonPatch Operations actions
 */
@Injectable()
export class ExploitationPlanEffects {

  /**
   * Retrieve all workpackages for this workingplan
   */
/*  @Effect() retrieveExploitationPlan$ = this.actions$.pipe(
    ofType(WorkpackageActionTypes.RETRIEVE_ALL_WORKPACKAGES),
    switchMap((action: RetrieveAllWorkpackagesAction) => {
      return this.exploitationPlanService.searchForAvailableWorpackages(action.payload.projectId).pipe(
        map((items: WorkpackageSearchItem[]) => new InitWorkingplanAction(items)),
        catchError((error: Error) => {
          if (error) {
            console.error(error.message);
          }
          return observableOf(new RetrieveAllWorkpackagesErrorAction());
        }));
    }));*/

  /**
   * When the store is rehydrated objects in the state lose the prototypes,
   * so restore them
   */
  @Effect() normalizeObjectsOnRehydrate = this.actions$
    .pipe(ofType(StoreActionTypes.REHYDRATE),
      map(() => new NormalizeExploitationPlanObjectsOnRehydrateAction())
    );

  constructor(
    private actions$: Actions,
    private exploitationPlanService: ExploitationPlanService,
    private itemAuthorityRelationService: ItemAuthorityRelationService,
    private itemService: ItemDataService,
    private modalService: NgbModal,
    private notificationsService: NotificationsService,
    private store$: Store<any>,
    private translate: TranslateService
  ) {
  }

}
