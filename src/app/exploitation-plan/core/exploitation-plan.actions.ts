import { Action } from '@ngrx/store';

import { type } from '../../shared/ngrx/type';
import { Item } from '../../core/shared/item.model';
import { ExploitationPlanTask } from './models/exploitation-plan-task.model';
import { ExploitationPlan } from './models/exploitation-plan.model';
import { MetadataMap } from '../../core/shared/metadata.models';
import { ExploitationPlanStep } from './models/exploitation-plan-step.model';

/**
 * For each action type in an action group, make a simple
 * enum object for all of this group's action types.
 *
 * The 'type' utility function coerces strings into string
 * literal types and runs a simple check to guarantee all
 * action types in the application are unique.
 */
export const ExploitationPlanActionTypes = {
  ADD_EXPLOITATION_PLAN_TASK: type('dspace/exploitationplan/ADD_EXPLOITATION_PLAN_TASK'),
  ADD_EXPLOITATION_PLAN_TASK_SUCCESS: type('dspace/exploitationplan/ADD_EXPLOITATION_PLAN_TASK_SUCCESS'),
  ADD_EXPLOITATION_PLAN_TASK_ERROR: type('dspace/exploitationplan/ADD_EXPLOITATION_PLAN_TASK_ERROR'),
  CLEAR_EXPLOITATION_PLAN: type('dspace/exploitationplan/CLEAR_EXPLOITATION_PLAN'),
  GENERATE_EXPLOITATION_PLAN_TASK: type('dspace/exploitationplan/GENERATE_EXPLOITATION_PLAN_TASK'),
  GENERATE_EXPLOITATION_PLAN_TASK_SUCCESS: type('dspace/exploitationplan/GENERATE_EXPLOITATION_PLAN_TASK_SUCCESS'),
  GENERATE_EXPLOITATION_PLAN_TASK_ERROR: type('dspace/exploitationplan/GENERATE_EXPLOITATION_PLAN_TASK_ERROR'),
  INIT_EXPLOITATION_PLAN: type('dspace/exploitationplan/INIT_EXPLOITATION_PLAN'),
  INIT_EXPLOITATION_PLAN_SUCCESS: type('dspace/exploitationplan/INIT_EXPLOITATION_PLAN_SUCCESS'),
  INIT_EXPLOITATION_PLAN_ERROR: type('dspace/exploitationplan/INIT_EXPLOITATION_PLAN_ERROR'),
  NORMALIZE_EXPLOITATION_PLAN_OBJECTS_ON_REHYDRATE: type('dspace/exploitationplan/NORMALIZE_EXPLOITATION_PLAN_OBJECTS_ON_REHYDRATE'),
  PATCH_EXPLOITATION_PLAN_STEP_METADATA: type('dspace/exploitationplan/PATCH_EXPLOITATION_PLAN_STEP_METADATA'),
  PATCH_EXPLOITATION_PLAN_STEP_METADATA_SUCCESS: type('dspace/exploitationplan/PATCH_EXPLOITATION_PLAN_STEP_METADATA_SUCCESS'),
  PATCH_EXPLOITATION_PLAN_STEP_METADATA_ERROR: type('dspace/exploitationplan/PATCH_EXPLOITATION_PLAN_STEP_METADATA_ERROR'),
  RETRIEVE_EXPLOITATION_PLAN: type('dspace/exploitationplan/RETRIEVE_EXPLOITATION_PLAN'),
  REMOVE_EXPLOITATION_PLAN_TASK: type('dspace/exploitationplan/REMOVE_EXPLOITATION_PLAN_TASK'),
  REMOVE_EXPLOITATION_PLAN_TASK_SUCCESS: type('dspace/exploitationplan/REMOVE_EXPLOITATION_PLAN_TASK_SUCCESS'),
  REMOVE_EXPLOITATION_PLAN_TASK_ERROR: type('dspace/exploitationplan/REMOVE_EXPLOITATION_PLAN_TASK_ERROR'),
  UPDATE_EXPLOITATION_PLAN_STEP: type('dspace/exploitationplan/UPDATE_EXPLOITATION_PLAN_STEP'),
  ORDER_EXPLOITATION_PLAN_TASK: type('dspace/exploitationplan/ORDER_EXPLOITATION_PLAN_TASK'),
  ORDER_EXPLOITATION_PLAN_TASK_SUCCESS: type('dspace/exploitationplan/ORDER_EXPLOITATION_PLAN_TASK_SUCCESS'),
  ORDER_EXPLOITATION_PLAN_TASK_ERROR: type('dspace/exploitationplan/ORDER_EXPLOITATION_PLAN_TASK_ERROR'),
  SET_EXPLOITATION_PLAN_STEP_COLLAPSE: type('dspace/exploitationplan/SET_EXPLOITATION_PLAN_STEP_COLLAPSE'),
  CLEAR_EXPLOITATION_PLAN_STEP_COLLAPSE: type('dspace/exploitationplan/CLEAR_EXPLOITATION_PLAN_STEP_COLLAPSE'),
};

/* tslint:disable:max-classes-per-file */

/**
 * An ngrx action for generate success
 */
export class AddExploitationPlanTaskAction implements Action {
  type = ExploitationPlanActionTypes.ADD_EXPLOITATION_PLAN_TASK;
  payload: {
    exploitationPlanId: string;
    stepId: string;
    taskId: string;
  };

  /**
   * Create a new AddExploitationPlanTaskAction
   *
   * @param exploitationPlanId
   *    the exploitation plan's id
   * @param stepId
   *    the exploitation plan step's id to whom to add task
   * @param taskId
   *    the Item id of the exploitation plan task to add
   */
  constructor(exploitationPlanId: string, stepId: string, taskId: string) {
    this.payload = { exploitationPlanId, stepId, taskId };
  }
}

/**
 * An ngrx action for generate success
 */
export class AddExploitationPlanTaskSuccessAction implements Action {
  type = ExploitationPlanActionTypes.ADD_EXPLOITATION_PLAN_TASK_SUCCESS;
  payload: {
    exploitationPlanId: string;
    stepId: string;
    task: ExploitationPlanTask;
  };

  /**
   * Create a new AddExploitationPlanTaskSuccessAction
   *
   * @param exploitationPlanId
   *    the exploitation plan's id
   * @param stepId
   *    the exploitation plan step's id to whom to add task
   * @param task
   *    the ExploitationPlanTask object to add
   */
  constructor(exploitationPlanId: string, stepId: string, task: ExploitationPlanTask) {
    this.payload = { exploitationPlanId, stepId, task };
  }
}

/**
 * An ngrx action for generate error
 */
export class AddExploitationPlanTaskErrorAction implements Action {
  type = ExploitationPlanActionTypes.ADD_EXPLOITATION_PLAN_TASK_ERROR;
}

/**
 * An ngrx action to generate a exploitation plan objects
 */
export class GenerateExploitationPlanTaskAction implements Action {
  type = ExploitationPlanActionTypes.GENERATE_EXPLOITATION_PLAN_TASK;
  payload: {
    projectId: string;
    exploitationPlanId: string;
    stepId: string;
    taskType: string;
    metadata: MetadataMap
  };

  /**
   * Create a new GenerateExploitationPlanTaskAction
   *
   * @param projectId
   *    the project's UUID where to create the object
   * @param exploitationPlanId
   *    the exploitation plan's id
   * @param stepId
   *    the exploitation plan step's id
   * @param taskType
   *    the exploitation plan task's type
   * @param metadata: Metadata
   *    the exploitation plan task's Metadata
   */
  constructor(projectId: string, exploitationPlanId: string, stepId: string, taskType: string, metadata: MetadataMap) {
    this.payload = { projectId, exploitationPlanId, stepId, taskType, metadata };
  }
}

/**
 * An ngrx action for generate success
 */
export class GenerateExploitationPlanTaskSuccessAction implements Action {
  type = ExploitationPlanActionTypes.GENERATE_EXPLOITATION_PLAN_TASK_SUCCESS;
  payload: {
    exploitationPlanId: string;
    stepId: string;
    item: Item;
  };

  /**
   * Create a new GenerateExploitationPlanTaskSuccessAction
   *
   * @param exploitationPlanId
   *    the exploitation plan's id
   * @param stepId
   *    the exploitation plan step's id
   * @param item
   *    the Item of the exploitation plan task generated
   */
  constructor(exploitationPlanId: string, stepId: string, item: Item) {
    this.payload = { exploitationPlanId, stepId, item };
  }
}

/**
 * An ngrx action for generate error
 */
export class GenerateExploitationPlanTaskErrorAction implements Action {
  type = ExploitationPlanActionTypes.GENERATE_EXPLOITATION_PLAN_TASK_ERROR;
}

/**
 * An ngrx action to init exploitation plan's model objects
 */
export class InitExploitationPlanAction implements Action {
  type = ExploitationPlanActionTypes.INIT_EXPLOITATION_PLAN;
  payload: {
    item: Item;
  };

  /**
   * Create a new InitExploitationPlanAction
   *
   * @param item
   *    the Item of the exploitation plan
   */
  constructor(item: Item) {
    this.payload = { item };
  }
}

/**
 * An ngrx action for init success
 */
export class InitExploitationPlanSuccessAction implements Action {
  type = ExploitationPlanActionTypes.INIT_EXPLOITATION_PLAN_SUCCESS;
  payload: {
    id: string;
    exploitationPlanObj: ExploitationPlan
  };

  /**
   * Create a new InitExploitationPlanSuccessAction
   *
   * @param id
   *    the Item id of the exploitation plan generated
   * @param exploitationPlanObj
   *    the exploitation plan object
   */
  constructor(id: string, exploitationPlanObj: ExploitationPlan) {
    this.payload = { id, exploitationPlanObj };
  }
}

/**
 * An ngrx action for init error
 */
export class InitExploitationPlanErrorAction implements Action {
  type = ExploitationPlanActionTypes.INIT_EXPLOITATION_PLAN_ERROR;
}

/**
 * An ngrx action to patch a task's metadata
 */
export class PatchExploitationPlanStepMetadataAction implements Action {
  type = ExploitationPlanActionTypes.PATCH_EXPLOITATION_PLAN_STEP_METADATA;
  payload: {
    exploitationPlanId: string;
    stepId: string;
    oldStep: ExploitationPlanStep;
    metadata: string;
    metadataIndex: number;
    value: string;
  };

  /**
   * Create a new PatchExploitationPlanStepMetadataAction
   *
   * @param exploitationPlanId
   *    the exploitation plan's id
   * @param stepId
   *    the exploitation plan step's id
   * @param oldStep
   *    the previous exploitation plan step version
   * @param metadata
   *    the Item metadata to patch
   * @param metadataIndex
   *    the index of the Item metadata to patch
   * @param value
   *    the new value of the Item metadata to patch
   */
  constructor(
    exploitationPlanId: string,
    stepId: string,
    oldStep: ExploitationPlanStep,
    metadata: string,
    metadataIndex: number,
    value: string) {
    this.payload = { exploitationPlanId, stepId, oldStep, metadata, metadataIndex, value };
  }
}

/**
 * An ngrx action to patch a task's metadata
 */
export class PatchExploitationPlanStepMetadataSuccessAction implements Action {
  type = ExploitationPlanActionTypes.PATCH_EXPLOITATION_PLAN_STEP_METADATA_SUCCESS;
  payload: {
    exploitationPlanId: string;
    stepId: string,
    oldStep: ExploitationPlanStep,
    item: Item;
  };

  /**
   * Create a new PatchExploitationPlanStepMetadataSuccessAction
   *
   * @param exploitationPlanId
   *    the exploitation plan's id
   * @param stepId
   *    the exploitation plan step's id
   * @param oldStep
   *    the previous exploitation plan step version
   * @param item
   *    the patched item
   */
  constructor(
    exploitationPlanId: string,
    stepId: string,
    oldStep: ExploitationPlanStep,
    item: Item) {
    this.payload = { exploitationPlanId, stepId, oldStep, item };
  }
}

/**
 * An ngrx action for patch error
 */
export class PatchExploitationPlanStepMetadataErrorAction implements Action {
  type = ExploitationPlanActionTypes.PATCH_EXPLOITATION_PLAN_STEP_METADATA_ERROR;
}

/**
 * An ngrx action for removing task
 */
export class RemoveExploitationPlanTaskAction implements Action {
  type = ExploitationPlanActionTypes.REMOVE_EXPLOITATION_PLAN_TASK;
  payload: {
    exploitationPlanId: string;
    parentId: string;
    taskId: string;
    taskPosition: number;
  };

  /**
   * Create a new RemoveExploitationPlanTaskAction
   *
   * @param exploitationPlanId
   *    the exploitation plan's id
   * @param parentId
   *    the exploitation plan task's parent id from where to remove task
   * @param taskId
   *    the Item id of the exploitation plan task to remove
   * @param taskPosition
   *    the array position of the exploitation plan task
   */
  constructor(exploitationPlanId: string, parentId: string, taskId: string, taskPosition: number) {
    this.payload = { exploitationPlanId, parentId, taskId, taskPosition };
  }
}

/**
 * An ngrx action for remove success
 */
export class RemoveExploitationPlanTaskSuccessAction implements Action {
  type = ExploitationPlanActionTypes.REMOVE_EXPLOITATION_PLAN_TASK_SUCCESS;
  payload: {
    exploitationPlanId: string;
    parentId: string;
    taskId: string;
  };

  /**
   * Create a new RemoveExploitationPlanTaskSuccessAction
   *
   * @param exploitationPlanId
   *    the exploitation plan's id
   * @param parentId
   *    the exploitation plan task's parent id from where to remove task
   * @param taskId
   *    the Item id of the exploitation plan task to remove
   */
  constructor(exploitationPlanId: string, parentId: string, taskId: string) {
    this.payload = { exploitationPlanId, parentId, taskId };
  }
}

/**
 * An ngrx action for remove error
 */
export class RemoveExploitationPlanTaskErrorAction implements Action {
  type = ExploitationPlanActionTypes.REMOVE_EXPLOITATION_PLAN_TASK_ERROR;
}

/**
 * An ngrx action to retrieve Exploitation Plan
 */
export class RetrieveExploitationPlanAction implements Action {
  type = ExploitationPlanActionTypes.RETRIEVE_EXPLOITATION_PLAN;
  payload: {
    projectId: string;
    subprojectId: string;
  };

  /**
   * Create a new RetrieveAllLinkedWorkingPlanObjectsAction
   *
   * @param projectId
   *    the project'id
   * @param subprojectId
   *    the subproject'id
   */
  constructor(projectId: string, subprojectId: string) {
    this.payload = { projectId, subprojectId };
  }
}

/**
 * An ngrx action to update a task
 */
export class UpdateExploitationPlanStepAction implements Action {
  type = ExploitationPlanActionTypes.UPDATE_EXPLOITATION_PLAN_STEP;
  payload: {
    exploitationPlanId: string;
    exploitationPlanStep: ExploitationPlanStep;
  };

  /**
   * Create a new UpdateExploitationPlanStepAction
   *
   * @param exploitationPlanId
   *    the exploitation plan's id
   * @param exploitationPlanStep
   *    the updated exploitation plan step
   */
  constructor(exploitationPlanId: string, exploitationPlanStep: ExploitationPlanStep) {
    this.payload = { exploitationPlanId, exploitationPlanStep };
  }
}

/**
 * An ngrx action to normalize state object on rehydrate
 */
export class NormalizeExploitationPlanObjectsOnRehydrateAction implements Action {
  type = ExploitationPlanActionTypes.NORMALIZE_EXPLOITATION_PLAN_OBJECTS_ON_REHYDRATE;
}


/**
 * An ngrx action to normalize state object on rehydrate
 */
export class OrderExploitationPlanTasksAction implements Action {
  type = ExploitationPlanActionTypes.ORDER_EXPLOITATION_PLAN_TASK;
  payload: {
    exploitationPlanId: string;
    stepId: string;
    currentTasks: ExploitationPlanTask[];
    previousTasks: ExploitationPlanTask[];
  };

  constructor(exploitationPlanId: string,
      stepId: string,
      currentTasks: ExploitationPlanTask[],
      previousTasks: ExploitationPlanTask[]) {
    this.payload = {
      exploitationPlanId,
      stepId,
      currentTasks,
      previousTasks
    };
  }

}
/**
 * An ngrx action for ordering success
 */
export class OrderExploitationPlanTasksSuccessAction implements Action {
  type = ExploitationPlanActionTypes.ORDER_EXPLOITATION_PLAN_TASK_SUCCESS;
}

/**
 * An ngrx action for ordering tasks error
 */
export class OrderExploitationPlanTasksErrorAction implements Action {
  type = ExploitationPlanActionTypes.ORDER_EXPLOITATION_PLAN_TASK_ERROR;
  payload: {
    exploitationPlanId: string;
    stepId: string;
    currentTasks: ExploitationPlanTask[];
    previousTasks: ExploitationPlanTask[];
  };

  /**
   * Create a new OrderExploitationPlanTasksErrorAction
   *
   * @param impactPathwayId
   *    the impact pathway's id
   * @param stepId
   *    the impact pathway step's id
   * @param parentTaskId
   *    the impact pathway parent task's id where to order task
   * @param previousTasks
   *    the list of the impact pathway tasks in the previous order to restore
   */
  constructor(
    exploitationPlanId: string,
    stepId: string,
    currentTasks: ExploitationPlanTask[],
    previousTasks: ExploitationPlanTask[]
  ) {
    this.payload = { exploitationPlanId, stepId, currentTasks, previousTasks};
  }
}

/**
 * An ngrx action to set step plan collapsed value
 */
export class SetExploitationPlanStepCollapseAction implements Action {
  type = ExploitationPlanActionTypes.SET_EXPLOITATION_PLAN_STEP_COLLAPSE;
  payload: {
    exploitationPlanId: string;
    exploitationPlanStepId: string;
    value: boolean;
  };

  /**
   * Create a new SetExploitationPlanStepCollapseAction
   *
   * @param exploitationPlanId
   *    the exploitation plan's id
   * @param exploitationPlanStep
   *    the updated exploitation plan step
   */
  constructor(exploitationPlanId: string, exploitationPlanStepId: string, value: boolean) {
    this.payload = { exploitationPlanId, exploitationPlanStepId, value };
  }
}


/**
 * An ngrx action to clear all step plans collapse
 */
export class ClearExploitationPlanStepCollapseAction implements Action {
  type = ExploitationPlanActionTypes.CLEAR_EXPLOITATION_PLAN_STEP_COLLAPSE;
}



/* tslint:enable:max-classes-per-file */

/**
 * Export a type alias of all actions in this action group
 * so that reducers can easily compose action types
 */
export type ExploitationPlanActions
  = AddExploitationPlanTaskAction
  | AddExploitationPlanTaskErrorAction
  | AddExploitationPlanTaskSuccessAction
  | GenerateExploitationPlanTaskAction
  | GenerateExploitationPlanTaskErrorAction
  | GenerateExploitationPlanTaskSuccessAction
  | InitExploitationPlanAction
  | InitExploitationPlanErrorAction
  | InitExploitationPlanSuccessAction
  | NormalizeExploitationPlanObjectsOnRehydrateAction
  | PatchExploitationPlanStepMetadataAction
  | PatchExploitationPlanStepMetadataErrorAction
  | PatchExploitationPlanStepMetadataSuccessAction
  | RetrieveExploitationPlanAction
  | RemoveExploitationPlanTaskAction
  | RemoveExploitationPlanTaskErrorAction
  | RemoveExploitationPlanTaskSuccessAction
  | UpdateExploitationPlanStepAction
  | OrderExploitationPlanTasksAction
  | OrderExploitationPlanTasksSuccessAction
  | OrderExploitationPlanTasksErrorAction
  | SetExploitationPlanStepCollapseAction
  | ClearExploitationPlanStepCollapseAction;
