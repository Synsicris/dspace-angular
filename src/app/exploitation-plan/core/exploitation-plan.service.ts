import { Injectable } from '@angular/core';
import { WorkpackageSearchItem } from '../../core/working-plan/models/workpackage-step.model';
import { environment } from '../../../environments/environment';
import { PaginationComponentOptions } from '../../shared/pagination/pagination-component-options.model';
import { SortDirection, SortOptions } from '../../core/cache/models/sort-options.model';
import { PaginatedSearchOptions } from '../../shared/search/paginated-search-options.model';
import { concatMap, filter, first, map, mergeMap, scan, switchMap } from 'rxjs/operators';
import { RemoteData } from '../../core/data/remote-data';
import { PaginatedList } from '../../core/data/paginated-list.model';
import { SearchResult } from '../../shared/search/search-result.model';
import { hasValue, isNotEmpty, isNotUndefined } from '../../shared/empty.util';
import { followLink } from '../../shared/utils/follow-link-config.model';
import { getFirstCompletedRemoteData, getFirstSucceededRemoteDataPayload } from '../../core/shared/operators';
import { Item } from '../../core/shared/item.model';
import { ProjectDataService } from '../../core/project/project-data.service';
import { Observable } from 'rxjs';
import { Metadata } from '../../core/shared/metadata.utils';
import { ItemDataService } from '../../core/data/item-data.service';

@Injectable()
export class ExploitationPlanService {

  constructor(
    protected itemService: ItemDataService,
    private projectService: ProjectDataService
  ) {
  }

  getExploitationPlanFromProjectId(projectId): Observable<RemoteData<Item>> {
    return this.projectService.getProjectItemByRelation(projectId).pipe(
      getFirstSucceededRemoteDataPayload(),
      switchMap((projectItem: Item) => {
        const metadataValue = Metadata.first(projectItem.metadata, 'dc.relation.exploitationplan');
        if (isNotEmpty(metadataValue) && isNotEmpty(metadataValue.authority)) {
          return this.itemService.findById(metadataValue.authority).pipe(
            getFirstCompletedRemoteData()
          );
        } else {
          throw(new Error('Link to project item is missing.'));
        }
      })
    );
  }

/*  searchForAvailableExploitationPlan(projectId: string): Observable<WorkpackageSearchItem[]> {
    const searchConfiguration = environment.workingPlan.workpackagesSearchConfigName;
    const paginationOptions: PaginationComponentOptions = new PaginationComponentOptions();
    paginationOptions.id = 'search-available-workpackages';
    paginationOptions.pageSize = 1000;
    const sortOptions = new SortOptions(environment.workingPlan.workingPlanPlaceMetadata, SortDirection.ASC);

    const searchOptions = new PaginatedSearchOptions({
      configuration: searchConfiguration,
      pagination: paginationOptions,
      sort: sortOptions,
      scope: projectId
    });

    return this.searchService.search(searchOptions).pipe(
      filter((rd: RemoteData<PaginatedList<SearchResult<any>>>) => rd.hasSucceeded),
      map((rd: RemoteData<PaginatedList<SearchResult<any>>>) => {
        const dsoPage: any[] = rd.payload.page
          .filter((result) => hasValue(result))
          .map((searchResult: SearchResult<any>) => {
            if (searchResult.indexableObject.type === 'item') {
              return observableOf({
                id: null,
                item: searchResult.indexableObject
              });
            } else {
              this.linkService.resolveLink(searchResult.indexableObject, followLink('item'));
              return searchResult.indexableObject.item.pipe(
                getFirstSucceededRemoteDataPayload(),
                map((item: Item) => ({
                  id: searchResult.indexableObject.id,
                  item: item
                }))
              );
            }
          });
        const payload = Object.assign(rd.payload, { page: dsoPage }) as PaginatedList<any>;
        return Object.assign(rd, { payload: payload });
      }),
      mergeMap((rd: RemoteData<PaginatedList<Observable<WorkpackageSearchItem>>>) => {
        if (rd.payload.page.length === 0) {
          return observableOf([]);
        } else {
          return observableFrom(rd.payload.page).pipe(
            concatMap((list: Observable<WorkpackageSearchItem>) => list),
            scan((acc: any, value: any) => [...acc, value], []),
            filter((list: WorkpackageSearchItem[]) => list.length === rd.payload.page.length),
          );
        }
      }),
      first((result: WorkpackageSearchItem[]) => isNotUndefined(result))
    );
  }*/
}
