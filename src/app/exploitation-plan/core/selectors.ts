import { createSelector, MemoizedSelector } from '@ngrx/store';

import { AppState } from '../../app.reducer';
import { isNotEmpty } from '../../shared/empty.util';
import { ExploitationPlanState } from './exploitation-plan.reducer';
import { ExploitationPlan } from './models/exploitation-plan.model';
import { ExploitationPlanStep } from './models/exploitation-plan-step.model';


function exploitationPlanKeySelector<T>(key: string, selector): MemoizedSelector<AppState, ExploitationPlan> {
  return createSelector(selector, (state: ExploitationPlanState) => {
    if (isNotEmpty(state) && isNotEmpty(state.exploitationPlan)) {
      return state.exploitationPlan[key];
    } else {
      return undefined;
    }
  });
}

function exploitationPlanStepKeySelector<T>(key: string, stepId: string, selector): MemoizedSelector<AppState, ExploitationPlanStep> {
  return createSelector(selector, (state: ExploitationPlanState) => {
    if (isNotEmpty(state) && isNotEmpty(state.exploitationPlan)) {
      return state.exploitationPlan[key].getStep(stepId);
    } else {
      return undefined;
    }
  });
}

function exploitationPlanStepCollapsableSelector<T>(key: string, stepId: string, selector): MemoizedSelector<AppState, ExploitationPlanStep> {
  return createSelector(selector, (state: ExploitationPlanState) => {
    if (isNotEmpty(state) && isNotEmpty(state.collapsed) && isNotEmpty(state.collapsed[key]) && isNotEmpty(state.collapsed[key][stepId])) {
      return state.collapsed[key][stepId];
    } else {
      return true;
    }
  });
}

/**
 * Returns the exploitationPlan state.
 * @function _getExploitationPlanState
 * @param {AppState} state Top level state.
 * @return {ExploitationPlanState}
 */
const _getExploitationPlanState = (state: any) => state.exploitationPlan;

/**
 * Returns the exploitation plan state.
 * @function exploitationPlanStateSelector
 * @return {ExploitationPlanState}
 */
export const exploitationPlanStateSelector = createSelector(_getExploitationPlanState,
  (state: ExploitationPlanState) => state
);

/**
 * Returns true if exploitation plan objects are loaded.
 * @function isExploitationPlanLoadedSelector
 * @return {boolean}
 */
export const isExploitationPlanLoadedSelector = createSelector(_getExploitationPlanState,
  (state: ExploitationPlanState) => state.loaded
);

/**
 * Returns true if the user a operation is processing.
 * @function isExploitationPlanProcessingSelector
 * @return {boolean}
 */
export const isExploitationPlanProcessingSelector = createSelector(_getExploitationPlanState,
  (state: ExploitationPlanState) => state.processing
);

/**
 * Returns the ExploitationPlan object.
 * @function exploitationPlanByIDSelector
 * @param {string} exploitationPlanId
 * @return {ExploitationPlan}
 */
export function exploitationPlanByIDSelector(exploitationPlanId: string): MemoizedSelector<AppState, ExploitationPlan> {
  return exploitationPlanKeySelector<ExploitationPlan>(exploitationPlanId, exploitationPlanStateSelector);
}

/**
 * Returns the ExploitationPlan object.
 * @function exploitationPlanByIDSelector
 * @param {string} exploitationPlanId
 * @return {ExploitationPlan}
 */
export function exploitationPlanStepByIDSelector(exploitationPlanId: string, exploitationPlanStepId: string): MemoizedSelector<AppState, ExploitationPlanStep> {
  return exploitationPlanStepKeySelector<ExploitationPlanStep>(exploitationPlanId, exploitationPlanStepId, exploitationPlanStateSelector);
}

/**
 * Returns the ExploitationPlan object.
 * @function exploitationPlanByIDSelector
 * @param {string} exploitationPlanId
 * @return {ExploitationPlan}
 */
export function exploitationPlanStepCollapsable(exploitationPlanId: string, exploitationPlanStepId: string): MemoizedSelector<AppState, ExploitationPlanStep> {
  return exploitationPlanStepCollapsableSelector<ExploitationPlanStep>(exploitationPlanId, exploitationPlanStepId, exploitationPlanStateSelector);
}


