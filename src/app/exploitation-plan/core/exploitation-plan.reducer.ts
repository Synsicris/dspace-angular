import {
  AddExploitationPlanTaskSuccessAction,
  ExploitationPlanActions,
  ExploitationPlanActionTypes,
  InitExploitationPlanSuccessAction,
  RemoveExploitationPlanTaskSuccessAction
} from './exploitation-plan.actions';
import { ExploitationPlan } from './models/exploitation-plan.model';
import { ExploitationPlanStep } from './models/exploitation-plan-step.model';

/**
 * An interface to represent Exploitation Plan object entry
 */
export interface ExploitationPlanEntry {
  [exploitationPlanId: string]: ExploitationPlan;
}

/**
 * The Exploitation Plan State
 */
export interface ExploitationPlanState {
  exploitationPlan: ExploitationPlanEntry;
  loaded: boolean;
  processing: boolean;
  moving: boolean;
}

const initialState: ExploitationPlanState = {
  exploitationPlan: null,
  loaded: false,
  processing: false,
  moving: false
};

/**
 * The Exploitation Plan Reducer
 *
 * @param state
 *    the current state
 * @param action
 *    the action to perform on the state
 * @return ExploitationPlanState
 *    the new state
 */
export function exploitationPlanReducer(state = initialState, action: ExploitationPlanActions): ExploitationPlanState {
  switch (action.type) {

    case ExploitationPlanActionTypes.ADD_EXPLOITATION_PLAN_TASK:
    case ExploitationPlanActionTypes.GENERATE_EXPLOITATION_PLAN_TASK:
    case ExploitationPlanActionTypes.INIT_EXPLOITATION_PLAN:
    case ExploitationPlanActionTypes.REMOVE_EXPLOITATION_PLAN_TASK: {
      return Object.assign({}, state, {
        processing: true
      });
    }

    case ExploitationPlanActionTypes.ADD_EXPLOITATION_PLAN_TASK_SUCCESS: {
      return addExploitationPlanTaskToExploitationPlanStep(state, action as AddExploitationPlanTaskSuccessAction);
    }

    case ExploitationPlanActionTypes.INIT_EXPLOITATION_PLAN_SUCCESS: {
      return initExploitationPlan(state, action as InitExploitationPlanSuccessAction);
    }

    case ExploitationPlanActionTypes.ADD_EXPLOITATION_PLAN_TASK_ERROR:
    case ExploitationPlanActionTypes.GENERATE_EXPLOITATION_PLAN_TASK_ERROR:
    case ExploitationPlanActionTypes.INIT_EXPLOITATION_PLAN_ERROR:
    case ExploitationPlanActionTypes.REMOVE_EXPLOITATION_PLAN_TASK_ERROR: {
      return Object.assign({}, state, {
        processing: false
      });
    }

    case ExploitationPlanActionTypes.REMOVE_EXPLOITATION_PLAN_TASK_SUCCESS: {
      return RemoveExploitationPlanTaskFromExploitationPlanStep(state, action as RemoveExploitationPlanTaskSuccessAction);
    }

    default: {
      return state;
    }
  }
}

/**
 * Init a impact pathway object.
 *
 * @param state
 *    the current state
 * @param action
 *    an InitExploitationPlanSuccessAction
 * @return ExploitationPlanState
 *    the new state.
 */
function addExploitationPlanTaskToExploitationPlanStep(state: ExploitationPlanState, action: AddExploitationPlanTaskSuccessAction): ExploitationPlanState {
  const newState = Object.assign({}, state);
  const step: ExploitationPlanStep = newState.exploitationPlan[action.payload.exploitationPlanId].getStep(action.payload.stepId);
  const stepIndex: number = newState.exploitationPlan[action.payload.exploitationPlanId].getStepIndex(action.payload.stepId);
  const newStep = Object.assign(new ExploitationPlanStep(), step, {
    tasks: [...step.tasks, action.payload.task]
  });
  const newExploitationPlan = Object.assign(new ExploitationPlan(), state.exploitationPlan[action.payload.exploitationPlanId], {
    steps: newState.exploitationPlan[action.payload.exploitationPlanId].steps.map((stepEntry, index) => {
      return (index === stepIndex) ? newStep : stepEntry;
    })
  });
  return Object.assign({}, state, {
    exploitationPlan: Object.assign({}, state.exploitationPlan, {
      [action.payload.exploitationPlanId]: newExploitationPlan
    }),
    processing: false
  });
}

/**
 * Init a impact pathway object.
 *
 * @param state
 *    the current state
 * @param action
 *    an InitExploitationPlanSuccessAction
 * @return ExploitationPlanState
 *    the new state.
 */
function initExploitationPlan(state: ExploitationPlanState, action: InitExploitationPlanSuccessAction): ExploitationPlanState {
  return Object.assign({}, state, {
    exploitationPlan: Object.assign({}, state.exploitationPlan, {
      [action.payload.id]: action.payload.exploitationPlanObj
    }),
    processing: false,
    loaded: true
  });
}


/**
 * Remove task from step.
 *
 * @param state
 *    the current state
 * @param action
 *    an RemoveExploitationPlanTaskSuccessAction
 * @return ExploitationPlanState
 *    the new state.
 */
function RemoveExploitationPlanTaskFromExploitationPlanStep(state: ExploitationPlanState, action: RemoveExploitationPlanTaskSuccessAction): ExploitationPlanState {
  const newState = Object.assign({}, state);
  const step: ExploitationPlanStep = newState.exploitationPlan[action.payload.exploitationPlanId].getStep(action.payload.parentId);
  const stepIndex: number = newState.exploitationPlan[action.payload.exploitationPlanId].getStepIndex(action.payload.parentId);
  const newStep = Object.assign(new ExploitationPlanStep(), step, {
    tasks: [...step.tasks]
  });
  newStep.removeTask(action.payload.taskId);
  const newExploitationPlan = Object.assign(new ExploitationPlan(), state.exploitationPlan[action.payload.exploitationPlanId], {
    steps: newState.exploitationPlan[action.payload.exploitationPlanId].steps.map((stepEntry, index) => {
      return (index === stepIndex) ? newStep : stepEntry;
    })
  });
  return Object.assign({}, state, {
    exploitationPlan: Object.assign({}, state.exploitationPlan, {
      [action.payload.exploitationPlanId]: newExploitationPlan
    }),
    processing: false
  });
}

