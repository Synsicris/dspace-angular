import { Item } from './../../../../../core/shared/item.model';
import { TranslateLoaderMock } from './../../../../../shared/testing/translate-loader.mock';
import { RouterMock } from './../../../../../shared/mocks/router.mock';
import { ComponentFixture, TestBed } from '@angular/core/testing';
import { ProjectDataService } from '../../../../../core/project/project-data.service';

import { ExploitationPlanBoxComponent } from './exploitation-plan-box.component';
import { Router } from '@angular/router';
import { DSONameService } from '../../../../../core/breadcrumbs/dso-name.service';
import { getMockTranslateService } from '../../../../../shared/mocks/translate.service.mock';
import { TranslateLoader, TranslateModule, TranslateService } from '@ngx-translate/core';
import { boxMetadata } from './../../../../../shared/testing/box.mock';

describe('ExploitationPlanBoxComponent', () => {
  let component: ExploitationPlanBoxComponent;
  let fixture: ComponentFixture<ExploitationPlanBoxComponent>;

  const projectDataService = jasmine.createSpyObj('ProjectDataService', {
    getProjectCommunityByItemId: jasmine.createSpy('getProjectCommunityByItemId')
  });

  const dsoNameService = jasmine.createSpyObj('dsoNameService', {
    getName: 'Collection Name'
  });

  let translateService: TranslateService;

  const mockItem = Object.assign(new Item(), {
    id: 'fake-id',
    handle: 'fake/handle',
    lastModified: '2018',
    metadata: {
      'dc.title': [
        {
          language: null,
          value: 'test'
        }
      ],
      'dspace.entity.type': [
        {
          language: null,
          value: 'Person'
        }
      ]
    }
  });


  beforeEach(async () => {
    translateService = getMockTranslateService();
    await TestBed.configureTestingModule({
      declarations: [ExploitationPlanBoxComponent],
      imports: [
        TranslateModule.forRoot({
          loader: {
            provide: TranslateLoader,
            useClass: TranslateLoaderMock
          }
        })
      ],
      providers: [
        { provide: ProjectDataService, useValue: projectDataService },
        { provide: Router, useValue: new RouterMock() },
        { provide: DSONameService, useValue: dsoNameService },
        { provide: TranslateService, useValue: translateService },
        { provide: 'boxProvider', useValue: boxMetadata },
        { provide: 'itemProvider', useValue: mockItem },
      ]
    })
      .compileComponents();
  });

  beforeEach(() => {
    fixture = TestBed.createComponent(ExploitationPlanBoxComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });
});
